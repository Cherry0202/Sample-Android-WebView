{"version":3,"sources":["webpack:///./src/views/NoticeMessage.vue?01aa","webpack:///./src/views/NoticeMessage.vue","webpack:///./src/graphql/subscription/noticeMessage.ts","webpack:///./src/graphql/mutations/insertChat.ts","webpack:///./src/views/NoticeMessage.vue?c2b0","webpack:///./src/views/NoticeMessage.vue?04df"],"names":["class","ref","title","messages","message","index","key","sender","src","instructorIcon","alt","submit","state","type","placeholder","$t","disabled","length","icon","sendIcon","noticeMessageSubscription","noticeMessage","insertChatMutation","components","Header","setup","currentRoute","chatRoomId","value","params","id","chatLog","chat_room_id","result","noticeMessageResult","data","ChatRooms","Course","Instructor","scrollToEnd","scrollTop","scrollHeight","Chats","variables","insertChat","mutate","render","__scopeId"],"mappings":"kHAAA,W,iKCEOA,MAAM,eAAeC,IAAI,W,SAErBD,MAAM,mB,GAENA,MAAM,gB,SAERA,MAAM,sB,GAIRA,MAAM,a,yKAXX,eAAuB,GAAfE,MAAM,SACd,eAQM,MARN,EAQM,E,mBAPJ,eAMM,2BAN0B,EAAAC,UAAQ,SAA3BC,EAASC,G,wBAAtB,eAMM,OANqCC,IAAKD,GAAK,CACF,eAAdD,EAAQG,Q,iBAA3C,eAGM,MAHN,EAGM,CAFJ,eAAsD,OAAhDC,IAAK,EAAAC,eAAgBC,IAAI,GAAGV,MAAM,a,gBACxC,eAAiD,IAAjD,EAAiD,eAAtBI,EAAQA,SAAO,M,sBAEM,YAAdA,EAAQG,Q,iBAA5C,eAA2F,IAA3F,EAA2F,eAAtBH,EAAQA,SAAO,I,uCAIxF,eAOM,MAPN,EAOM,CANJ,eAKO,QALA,SAAM,8CAAU,EAAAO,OAAA,qBAAM,e,CAC3B,eAAwG,c,eAAhG,eAAuF,S,qDAAvE,EAAAC,MAAMR,QAAO,IAAES,KAAK,OAAQC,YAAa,EAAAC,GAAE,yB,iCAA3C,EAAAH,MAAMR,aAC9B,eAES,UAFDS,KAAK,SAASb,MAAM,cAAqBgB,UAAW,EAAAJ,MAAMR,QAAQa,Q,CACxE,eAAmD,GAA/BC,KAAM,EAAAC,SAAUnB,MAAM,Q,2oBCdlD,IAAMoB,EAA4B,iBAAH,KAUlBC,EAAgB,iBAAH,KAYX,I,wSCtBf,IAAMC,EAAqB,iBAAH,KAUT,I,YCDA,iBAAgB,CAC7BC,WAAY,CACVC,SAAA,MAEFC,MAJ6B,WAIxB,MACsB,iBAAjBC,EADL,EACKA,aACFC,EAAaD,EAAaE,MAAMC,OAAOC,GACvClB,EAAQ,eAAS,CACrBR,QAAS,KAELD,EAAW,eAAI,IACf4B,EAAU,iBAPb,EASgB,eAA4C,EAA2B,CACxFC,aAAcL,IADRM,EATL,EASKA,OATL,EAaqC,eAA6BZ,EAAe,CAClFW,aAAcL,IADAO,EAbb,EAaKD,OAIFxB,EAAiB,eAAUyB,EAAqB,MAAM,SAACC,GAAD,OAAUA,EAAKC,UAAU,GAAGC,OAAOC,WAAWpB,QAEpGqB,EAAc,WAClB,gBAAS,WACFR,EAAQH,QACbG,EAAQH,MAAMY,UAAYT,EAAQH,MAAMa,kBAI5C,eAAMR,GAAQ,SAACE,GACbhC,EAASyB,MAAQO,EAAKO,MACtBH,OA5BC,MA+B4B,eAAgC,GAAoB,iBAAO,CACxFI,UAAW,CACTX,aAAcL,EACdvB,QAASQ,EAAMR,aAHHwC,EA/Bb,EA+BKC,OAOFlC,EAAS,WACbiC,IACAhC,EAAMR,QAAU,IAGZe,EAAW,gBAAS,kBAAM,UAChC,MAAO,CACLA,WACAhB,WACAM,iBACAG,QACAD,SACAoB,c,UC5DN,EAAOe,OAAS,EAChB,EAAOC,UAAY,kBAEJ","file":"js/chunk-40eab8fc.1d9388cc.js","sourcesContent":["export { default } from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./NoticeMessage.vue?vue&type=style&index=0&id=56249bdd&scoped=true&lang=scss\"; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./NoticeMessage.vue?vue&type=style&index=0&id=56249bdd&scoped=true&lang=scss\"","<template>\n  <Header title=\"Name\" />\n  <div class=\"message-wrap\" ref=\"chatLog\">\n    <div v-for=\"(message, index) in messages\" :key=\"index\">\n      <div class=\"teacher-message\" v-if=\"message.sender === 'instructor'\">\n        <img :src=\"instructorIcon\" alt=\"\" class=\"face-icon\" />\n        <p class=\"says message\">{{ message.message }}</p>\n      </div>\n      <p class=\"my-message message\" v-if=\"message.sender === 'student'\">{{ message.message }}</p>\n    </div>\n  </div>\n\n  <div class=\"form-wrap\">\n    <form @submit.prevent=\"submit\">\n      <label> <input v-model=\"state.message\" type=\"text\" :placeholder=\"$t('notice-message.input')\" /> </label>\n      <button type=\"submit\" class=\"send-button\" v-bind:disabled=\"!state.message.length\">\n        <font-awesome-icon :icon=\"sendIcon\" class=\"icon\" />\n      </button>\n    </form>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, watch, ref, reactive, nextTick } from 'vue'\nimport Header from '@/components/Header.vue'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport { useSubscription, useMutation, useQuery, useResult } from '@vue/apollo-composable'\nimport noticeMessageSubscription, { noticeMessage } from '@/graphql/subscription/noticeMessage'\nimport { NoticeMessagesSubscription, InsertChatMutation, NoticeMessageQuery } from '@/graphql/@types/types'\nimport insertChatMutation from '@/graphql/mutations/insertChat'\n\nimport { useRouter } from 'vue-router'\n\nexport default defineComponent({\n  components: {\n    Header\n  },\n  setup() {\n    const { currentRoute } = useRouter()\n    const chatRoomId = currentRoute.value.params.id\n    const state = reactive({\n      message: ''\n    })\n    const messages = ref([] as NoticeMessagesSubscription['Chats'])\n    const chatLog = ref<HTMLDivElement>()\n\n    const { result } = useSubscription<NoticeMessagesSubscription>(noticeMessageSubscription, {\n      chat_room_id: chatRoomId\n    })\n\n    const { result: noticeMessageResult } = useQuery<NoticeMessageQuery>(noticeMessage, {\n      chat_room_id: chatRoomId\n    })\n\n    const instructorIcon = useResult(noticeMessageResult, null, (data) => data.ChatRooms[0].Course.Instructor.icon)\n\n    const scrollToEnd = () => {\n      nextTick(() => {\n        if (!chatLog.value) return\n        chatLog.value.scrollTop = chatLog.value.scrollHeight\n      })\n    }\n\n    watch(result, (data) => {\n      messages.value = data.Chats\n      scrollToEnd()\n    })\n\n    const { mutate: insertChat } = useMutation<InsertChatMutation>(insertChatMutation, () => ({\n      variables: {\n        chat_room_id: chatRoomId,\n        message: state.message\n      }\n    }))\n\n    const submit = () => {\n      insertChat()\n      state.message = ''\n    }\n\n    const sendIcon = computed(() => faPaperPlane)\n    return {\n      sendIcon,\n      messages,\n      instructorIcon,\n      state,\n      submit,\n      chatLog\n    }\n  }\n})\n</script>\n\n<style scoped lang=\"scss\">\n$formHeight: 75px;\n\n.message-wrap {\n  width: 100%;\n  height: calc(100vh - #{$formHeight} - 50px);\n  padding: 1rem;\n  overflow-y: auto;\n  text-align: right;\n\n  .message {\n    position: relative;\n    display: inline-block;\n    max-width: 250px;\n    padding: 0.75rem;\n    margin-top: 1rem;\n    border-radius: 0.5rem;\n  }\n\n  .teacher-message {\n    display: flex;\n    width: 100%;\n    overflow: hidden;\n\n    .face-icon {\n      width: 40px;\n      height: 40px;\n      background-color: #c3c3c3;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n    .says {\n      margin-left: 1rem;\n      text-align: left;\n      background: #fff;\n      &::after {\n        position: absolute;\n        top: 0;\n        left: -19px;\n        display: inline-block;\n        content: '';\n        border: 8px solid transparent;\n        border-right: 18px solid #fff;\n        -webkit-transform: rotate(35deg);\n        transform: rotate(35deg);\n      }\n    }\n  }\n\n  .my-message {\n    text-align: left;\n    background: #efc59c;\n\n    &::after {\n      position: absolute;\n      top: 0;\n      right: -19px;\n      content: '';\n      border: 8px solid transparent;\n      border-left: 18px solid #efc59c;\n      -webkit-transform: rotate(-35deg);\n      transform: rotate(-35deg);\n    }\n  }\n}\n\n.form-wrap {\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  width: 100%;\n  height: $formHeight;\n  background-color: #efc59c;\n\n  form {\n    width: 100%;\n    margin: 0.75rem;\n\n    label {\n      input {\n        display: inline-block;\n        width: 88%;\n        padding: 0.25rem 1rem;\n        font-size: 1.125rem;\n        background-color: #fff;\n        border-radius: 1rem;\n      }\n    }\n\n    .send-button {\n      width: 12%;\n      font-size: 1.75rem;\n      color: #727272;\n      &:active {\n        position: relative;\n        top: 2px;\n        box-shadow: none;\n      }\n      &:disabled {\n        opacity: 0.3;\n      }\n    }\n  }\n}\n</style>\n","import { gql } from '@apollo/client/core'\n\nconst noticeMessageSubscription = gql`\n  subscription NoticeMessages($chat_room_id: uuid) {\n    Chats(where: { chat_room_id: { _eq: $chat_room_id } }, order_by: { created_at: asc }) {\n      message\n      created_at\n      sender\n    }\n  }\n`\n\nexport const noticeMessage = gql`\n  query NoticeMessage($chat_room_id: uuid) {\n    ChatRooms(where: { id: { _eq: $chat_room_id } }) {\n      Course {\n        Instructor {\n          icon\n        }\n      }\n    }\n  }\n`\n\nexport default noticeMessageSubscription\n","import { gql } from '@apollo/client/core'\n\nconst insertChatMutation = gql`\n  mutation InsertChat($chat_room_id: uuid, $message: String) {\n    insert_Chats(objects: { chat_room_id: $chat_room_id, message: $message, sender: student }) {\n      returning {\n        created_at\n      }\n    }\n  }\n`\n\nexport default insertChatMutation\n","\nimport { defineComponent, computed, watch, ref, reactive, nextTick } from 'vue'\nimport Header from '@/components/Header.vue'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport { useSubscription, useMutation, useQuery, useResult } from '@vue/apollo-composable'\nimport noticeMessageSubscription, { noticeMessage } from '@/graphql/subscription/noticeMessage'\nimport { NoticeMessagesSubscription, InsertChatMutation, NoticeMessageQuery } from '@/graphql/@types/types'\nimport insertChatMutation from '@/graphql/mutations/insertChat'\n\nimport { useRouter } from 'vue-router'\n\nexport default defineComponent({\n  components: {\n    Header\n  },\n  setup() {\n    const { currentRoute } = useRouter()\n    const chatRoomId = currentRoute.value.params.id\n    const state = reactive({\n      message: ''\n    })\n    const messages = ref([] as NoticeMessagesSubscription['Chats'])\n    const chatLog = ref<HTMLDivElement>()\n\n    const { result } = useSubscription<NoticeMessagesSubscription>(noticeMessageSubscription, {\n      chat_room_id: chatRoomId\n    })\n\n    const { result: noticeMessageResult } = useQuery<NoticeMessageQuery>(noticeMessage, {\n      chat_room_id: chatRoomId\n    })\n\n    const instructorIcon = useResult(noticeMessageResult, null, (data) => data.ChatRooms[0].Course.Instructor.icon)\n\n    const scrollToEnd = () => {\n      nextTick(() => {\n        if (!chatLog.value) return\n        chatLog.value.scrollTop = chatLog.value.scrollHeight\n      })\n    }\n\n    watch(result, (data) => {\n      messages.value = data.Chats\n      scrollToEnd()\n    })\n\n    const { mutate: insertChat } = useMutation<InsertChatMutation>(insertChatMutation, () => ({\n      variables: {\n        chat_room_id: chatRoomId,\n        message: state.message\n      }\n    }))\n\n    const submit = () => {\n      insertChat()\n      state.message = ''\n    }\n\n    const sendIcon = computed(() => faPaperPlane)\n    return {\n      sendIcon,\n      messages,\n      instructorIcon,\n      state,\n      submit,\n      chatLog\n    }\n  }\n})\n","import { render } from \"./NoticeMessage.vue?vue&type=template&id=56249bdd&scoped=true&bindings={}\"\nimport script from \"./NoticeMessage.vue?vue&type=script&lang=ts\"\nexport * from \"./NoticeMessage.vue?vue&type=script&lang=ts\"\n\nimport \"./NoticeMessage.vue?vue&type=style&index=0&id=56249bdd&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-56249bdd\"\n\nexport default script"],"sourceRoot":""}